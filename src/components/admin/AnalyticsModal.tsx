import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import Icon from '@/components/ui/icon';

interface AnalyticsModalProps {
  isOpen: boolean;
  onClose: () => void;
  type: 'orders' | 'revenue' | 'users' | 'today' | 'chats' | 'chatUsers' | 'messages' | 'services';
  stats: any;
  orders?: any[];
}

export default function AnalyticsModal({ isOpen, onClose, type, stats, orders = [] }: AnalyticsModalProps) {
  const getContent = () => {
    switch (type) {
      case 'orders':
        return {
          title: 'üì¶ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤',
          icon: 'ShoppingCart',
          sections: [
            { label: '–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤', value: stats.totalOrders, color: 'text-blue-400' },
            { label: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', value: orders.filter((o: any) => o.status === 'completed').length, color: 'text-green-400' },
            { label: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', value: orders.filter((o: any) => o.status === 'pending').length, color: 'text-yellow-400' },
            { label: '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', value: `${Math.round(stats.totalRevenue / stats.totalOrders || 0)}‚ÇΩ`, color: 'text-purple-400' }
          ]
        };
      
      case 'revenue':
        return {
          title: 'üí∞ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤',
          icon: 'DollarSign',
          sections: [
            { label: '–û–±—â–∏–π –¥–æ—Ö–æ–¥', value: `${stats.totalRevenue}‚ÇΩ`, color: 'text-green-400' },
            { label: '–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –∑–∞–∫–∞–∑', value: `${Math.round(stats.totalRevenue / stats.totalOrders || 0)}‚ÇΩ`, color: 'text-blue-400' },
            { label: '–î–æ—Ö–æ–¥ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', value: `${Math.round(stats.totalRevenue / stats.activeUsers || 0)}‚ÇΩ`, color: 'text-purple-400' },
            { label: '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü', value: `${Math.round((stats.totalRevenue / 30) * 30)}‚ÇΩ`, color: 'text-cyan-400' }
          ]
        };
      
      case 'users':
        return {
          title: 'üë• –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
          icon: 'Users',
          sections: [
            { label: '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', value: stats.activeUsers, color: 'text-purple-400' },
            { label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ AI-—á–∞—Ç–æ–≤', value: stats.chatUsers || 0, color: 'text-pink-400' },
            { label: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞–∫–∞–∑—ã', value: `${Math.round((stats.totalOrders / stats.activeUsers || 0) * 100)}%`, color: 'text-green-400' },
            { label: '–°—Ä–µ–¥–Ω–∏–π LTV', value: `${Math.round(stats.totalRevenue / stats.activeUsers || 0)}‚ÇΩ`, color: 'text-blue-400' }
          ]
        };
      
      case 'today':
        return {
          title: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
          icon: 'TrendingUp',
          sections: [
            { label: '–ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è', value: stats.todayOrders, color: 'text-orange-400' },
            { label: '–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è', value: `${stats.todayOrders * 50}‚ÇΩ`, color: 'text-green-400' },
            { label: '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å', value: `${stats.todayOrders * 2}`, color: 'text-cyan-400' },
            { label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', value: stats.todayOrders > 0 ? 'üî• –í—ã—Å–æ–∫–∞—è' : 'üò¥ –ù–∏–∑–∫–∞—è', color: 'text-yellow-400' }
          ]
        };
      
      case 'chats':
        return {
          title: 'üí¨ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤',
          icon: 'MessageSquare',
          sections: [
            { label: '–í—Å–µ–≥–æ —á–∞—Ç–æ–≤', value: stats.totalChats || 0, color: 'text-cyan-400' },
            { label: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', value: stats.chatUsers || 0, color: 'text-pink-400' },
            { label: '–ß–∞—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', value: Math.round((stats.totalChats || 0) / (stats.chatUsers || 1)), color: 'text-blue-400' },
            { label: '–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å', value: stats.totalChats > 20 ? 'üî• –¢–æ–ø' : 'üìä –ù–æ—Ä–º–∞', color: 'text-green-400' }
          ]
        };
      
      case 'chatUsers':
        return {
          title: 'üß† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ AI-—Å–µ—Ä–≤–∏—Å–æ–≤',
          icon: 'Brain',
          sections: [
            { label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π AI', value: stats.chatUsers || 0, color: 'text-pink-400' },
            { label: '–û—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞', value: `${Math.round(((stats.chatUsers || 0) / stats.activeUsers || 0) * 100)}%`, color: 'text-purple-400' },
            { label: '–°—Ä–µ–¥–Ω–µ–µ —á–∞—Ç–æ–≤/—é–∑–µ—Ä', value: Math.round((stats.totalChats || 0) / (stats.chatUsers || 1)), color: 'text-cyan-400' },
            { label: '–í–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å', value: (stats.chatUsers || 0) > 5 ? 'üöÄ –û—Ç–ª–∏—á–Ω–æ' : 'üìà –†–∞—Å—Ç—ë—Ç', color: 'text-green-400' }
          ]
        };
      
      case 'messages':
        return {
          title: '‚úâÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π',
          icon: 'Send',
          sections: [
            { label: '–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π', value: stats.totalMessages || 0, color: 'text-yellow-400' },
            { label: '–°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Ç', value: Math.round((stats.totalMessages || 0) / (stats.totalChats || 1)), color: 'text-blue-400' },
            { label: '–°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —é–∑–µ—Ä–∞', value: Math.round((stats.totalMessages || 0) / (stats.chatUsers || 1)), color: 'text-purple-400' },
            { label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', value: (stats.totalMessages || 0) > 50 ? 'üî• –í—ã—Å–æ–∫–∞—è' : 'üìä –°—Ä–µ–¥–Ω—è—è', color: 'text-green-400' }
          ]
        };
      
      case 'services':
        return {
          title: '‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ AI-—Å–µ—Ä–≤–∏—Å—ã',
          icon: 'Star',
          sections: stats.popularServices?.slice(0, 4).map((s: any, idx: number) => ({
            label: `${idx + 1}. ${s.name}`,
            value: `${s.count} –∑–∞–ø—Ä–æ—Å–æ–≤`,
            color: idx === 0 ? 'text-yellow-400' : idx === 1 ? 'text-gray-300' : idx === 2 ? 'text-orange-400' : 'text-blue-400'
          })) || []
        };
      
      default:
        return { title: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', icon: 'BarChart', sections: [] };
    }
  };

  const content = getContent();

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white border-white/20 max-w-2xl">
        <DialogHeader>
          <DialogTitle className="text-2xl flex items-center gap-3">
            <Icon name={content.icon as any} className="text-blue-400" size={32} />
            {content.title}
          </DialogTitle>
          <DialogDescription className="text-white/70">
            –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –º–µ—Ç—Ä–∏–∫–∏
          </DialogDescription>
        </DialogHeader>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
          {content.sections.map((section, idx) => (
            <div key={idx} className="bg-white/10 backdrop-blur-lg rounded-lg p-4 border border-white/20">
              <div className="text-sm text-white/70 mb-1">{section.label}</div>
              <div className={`text-2xl font-bold ${section.color}`}>{section.value}</div>
            </div>
          ))}
        </div>

        {type === 'services' && stats.popularServices && stats.popularServices.length > 4 && (
          <div className="mt-4 bg-white/10 backdrop-blur-lg rounded-lg p-4 border border-white/20">
            <h3 className="text-lg font-bold mb-3 text-white/90">–î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã:</h3>
            <div className="space-y-2 max-h-40 overflow-y-auto">
              {stats.popularServices.slice(4).map((service: any, idx: number) => (
                <div key={idx} className="flex justify-between text-sm">
                  <span className="text-white/70">{service.name}</span>
                  <span className="text-white font-semibold">{service.count}</span>
                </div>
              ))}
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
