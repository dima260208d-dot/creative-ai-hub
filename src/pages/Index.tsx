import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { toast } from '@/hooks/use-toast';
import Icon from '@/components/ui/icon';
import { useNavigate } from 'react-router-dom';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';

const services = [
  { id: 0, name: 'üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç', tokens: 5 },
  { id: 1, name: '‚úçÔ∏è –ë–∏–æ–≥—Ä–∞—Ñ–∏—è', tokens: 10 },
  { id: 2, name: 'üîÆ –ì–∞–¥–∞–Ω–∏–µ', tokens: 8 },
  { id: 3, name: 'üí° –ë–∏–∑–Ω–µ—Å-–∏–¥–µ–∏', tokens: 12 },
  { id: 4, name: 'üìÑ –†–µ–∑—é–º–µ', tokens: 10 },
  { id: 5, name: 'üè∑Ô∏è –ù–µ–π–º–∏–Ω–≥', tokens: 10 },
  { id: 6, name: 'üì± SMM-–ø–æ—Å—Ç—ã', tokens: 10 },
  { id: 7, name: 'üé® –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', tokens: 8 },
  { id: 8, name: 'üìß Email-–ø–∏—Å—å–º–æ', tokens: 10 },
  { id: 9, name: 'üé¨ –í–∏–¥–µ–æ-—Å–∫—Ä–∏–ø—Ç', tokens: 12 },
  { id: 10, name: 'ü§ñ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —á–∞—Ç-–±–æ—Ç–∞', tokens: 15 },
  { id: 11, name: 'üéØ –ö–æ–Ω—Ü–µ–ø—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞', tokens: 10 },
  { id: 13, name: '‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä', tokens: 15 },
  { id: 14, name: 'üòÇ –ò–¥–µ–∏ –º–µ–º–æ–≤', tokens: 8 },
  { id: 15, name: 'üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏', tokens: 10 },
  { id: 16, name: 'üìù SEO-—Å—Ç–∞—Ç—å—è', tokens: 15 },
  { id: 17, name: 'üåç –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞', tokens: 8 },
  { id: 18, name: 'üç≥ –†–µ—Ü–µ–ø—Ç—ã', tokens: 8 },
  { id: 19, name: 'üí™ –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫', tokens: 10 },
  { id: 20, name: 'üß™ –¢–µ—Å—Ç-–∫–µ–π—Å—ã', tokens: 12 },
  { id: 21, name: 'üìö –†–µ—Ñ–µ—Ä–∞—Ç', tokens: 15 },
  { id: 22, name: 'üìñ –°–æ—á–∏–Ω–µ–Ω–∏–µ', tokens: 15 },
  { id: 23, name: '‚úèÔ∏è –≠—Å—Å–µ', tokens: 15 },
  { id: 24, name: 'üéì –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞', tokens: 20 },
  { id: 25, name: 'üéØ –î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞', tokens: 25 },
  { id: 26, name: 'üî¨ –û—Ç—á—ë—Ç –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π', tokens: 12 },
  { id: 27, name: 'üìã –ö–æ–Ω—Å–ø–µ–∫—Ç –ª–µ–∫—Ü–∏–∏', tokens: 10 },
  { id: 28, name: 'üî¢ –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏', tokens: 12 }
];

export default function Index() {
  const navigate = useNavigate();
  const [message, setMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [messages, setMessages] = useState<Array<{ role: 'user' | 'assistant'; content: string }>>([]);
  const [selectedService, setSelectedService] = useState(0);
  const [userTokens, setUserTokens] = useState(0);
  const [user, setUser] = useState<any>(null);

  useEffect(() => {
    const userData = localStorage.getItem('user');
    if (userData) {
      const parsed = JSON.parse(userData);
      setUser(parsed);
      loadUserTokens(parsed.email);
    }
  }, []);

  const loadUserTokens = async (email: string) => {
    try {
      const response = await fetch(`https://functions.poehali.dev/62237982-f08c-4d74-99d7-28201bfc5f93?email=${email}`);
      const data = await response.json();
      setUserTokens(data.credits || 0);
    } catch (error) {
      console.error('Error loading tokens:', error);
    }
  };

  const handleSend = async () => {
    if (!message.trim()) {
      toast({ title: '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', variant: 'destructive' });
      return;
    }

    if (!user) {
      toast({
        title: '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        description: '–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã',
        variant: 'destructive'
      });
      setTimeout(() => navigate('/login'), 1500);
      return;
    }

    const service = services.find(s => s.id === selectedService);
    const tokensNeeded = service?.tokens || 5;

    if (userTokens < tokensNeeded) {
      toast({
        title: '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤',
        description: `–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å. –ù—É–∂–Ω–æ: ${tokensNeeded} —Ç–æ–∫–µ–Ω–æ–≤, —É –≤–∞—Å: ${userTokens}`,
        variant: 'destructive'
      });
      setTimeout(() => navigate('/credits'), 1500);
      return;
    }

    const userMessage = message;
    setMessage('');
    setMessages(prev => [...prev, { role: 'user', content: userMessage }]);
    setIsLoading(true);

    try {
      const response = await fetch('https://functions.poehali.dev/280ede35-32cc-4715-a89c-f76364702010', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          ...(user ? { 'X-User-Email': user.email } : {})
        },
        body: JSON.stringify({
          service_id: selectedService,
          service_name: service?.name || '–ß–∞—Ç',
          input_text: userMessage,
          user_email: user?.email
        })
      });

      const data = await response.json();

      if (data.success && data.result) {
        setMessages(prev => [...prev, { role: 'assistant', content: data.result }]);
        
        if (user && data.credits_remaining !== undefined) {
          setUserTokens(data.credits_remaining);
          toast({ 
            title: '‚úÖ –ì–æ—Ç–æ–≤–æ!', 
            description: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${tokensNeeded} AI-—Ç–æ–∫–µ–Ω–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å: ${data.credits_remaining}` 
          });
        }
      } else {
        if (data.error && data.error.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤')) {
          toast({ title: '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤', description: '–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã', variant: 'destructive' });
          setTimeout(() => navigate('/credits'), 1500);
        } else {
          toast({ title: '–û—à–∏–±–∫–∞', description: data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç', variant: 'destructive' });
        }
      }
    } catch (error) {
      toast({ title: '–û—à–∏–±–∫–∞', description: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º', variant: 'destructive' });
    }

    setIsLoading(false);
  };

  return (
    <div className="min-h-screen bg-background flex flex-col">
      <div className="sticky top-0 z-50 border-b border-border bg-card shadow-lg">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <button onClick={() => { setMessages([]); setSelectedService(0); }} className="flex items-center gap-3 hover:opacity-80 transition-opacity">
            <img src="https://cdn.poehali.dev/files/5474f469-cefe-4c33-a935-85f6463e1f5d.jpg" alt="Anima AI" className="w-12 h-12 rounded-full border-2 border-primary shadow-md shadow-primary/50" />
            <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent">Anima AI</h1>
          </button>
          <div className="flex items-center gap-3">
            {user ? (
              <>
                <Badge variant="secondary" className="px-4 py-2">
                  <Icon name="Coins" size={18} className="mr-2 text-yellow-400" />
                  <span className="font-bold">{userTokens}</span>
                </Badge>
                <Button 
                  variant="outline"
                  onClick={() => navigate('/dashboard')}
                >
                  <Icon name="User" size={18} className="mr-2" />
                  –ö–∞–±–∏–Ω–µ—Ç
                </Button>
              </>
            ) : (
              <Button 
                variant="default"
                onClick={() => navigate('/login')}
              >
                <Icon name="LogIn" size={18} className="mr-2" />
                –í–æ–π—Ç–∏
              </Button>
            )}
          </div>
        </div>
      </div>

      <div className="flex-1 container mx-auto px-4 py-6 max-w-4xl flex flex-col">
        <div className="flex-1 overflow-auto mb-4 space-y-4">
          {messages.length === 0 && (
            <Card className="p-8 text-center">
              <Icon name="Sparkles" size={48} className="mx-auto mb-4 text-primary" />
              <h2 className="text-2xl font-bold mb-2">–ü—Ä–∏–≤–µ—Ç! –Ø Anima üëã</h2>
              <p className="text-muted-foreground">–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–∏—Å –∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å!</p>
            </Card>
          )}

          {messages.map((msg, idx) => (
            <div key={idx} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
              <Card className={`p-4 max-w-[80%] ${msg.role === 'user' ? 'bg-primary text-primary-foreground' : ''}`}>
                <p className="whitespace-pre-wrap">{msg.content}</p>
              </Card>
            </div>
          ))}

          {isLoading && (
            <div className="flex justify-start">
              <Card className="p-4">
                <div className="flex items-center gap-2">
                  <Icon name="Loader2" size={20} className="animate-spin" />
                  <span>–î—É–º–∞—é...</span>
                </div>
              </Card>
            </div>
          )}
        </div>

        <div className="space-y-3">
          <Select value={selectedService.toString()} onValueChange={(v) => setSelectedService(parseInt(v))}>
            <SelectTrigger>
              <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å" />
            </SelectTrigger>
            <SelectContent>
              {services.map(service => (
                <SelectItem key={service.id} value={service.id.toString()}>
                  <div className="flex items-center justify-between w-full">
                    <span>{service.name}</span>
                    <Badge variant="outline" className="ml-2">{service.tokens} —Ç–æ–∫–µ–Ω–æ–≤</Badge>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          <div className="flex gap-2">
            <Textarea
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  handleSend();
                }
              }}
              placeholder="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
              className="min-h-[60px] max-h-[200px]"
              disabled={isLoading}
            />
            <Button onClick={handleSend} disabled={isLoading || !message.trim()} size="lg">
              <Icon name="Send" size={20} />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}